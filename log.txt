
{"README.md":[{"relevance":0.055046004603844144,"hash":"fed00e1","content":" [![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-22041afd0340ce965d47ae6ef1cefeee28c7c493a6346c4f15d667ab976d596c.svg)](https://classroom.github.com/a/7wm3xHtj)"},{"relevance":0,"hash":"9e819ea","content":" [![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/tCO2PRy"},{"relevance":0,"hash":"9e819ea","content":" # PA1-Starter"},{"relevance":0,"hash":"9e819ea","content":" 1. main.py is the driver function to run different experiments. You can run it with: `python main.py --experiment <experiment_name>`."},{"relevance":0,"hash":"9e819ea","content":" 2. the first time you run main.py, it will automatically download the data to the 'data' directory."},{"relevance":0,"hash":"9e819ea","content":" 3. config files need to be in the 'config' directory."},{"relevance":0,"hash":"9e819ea","content":" 5. You are free to create new functions, change existing function signatures, add/remove member variables/functions in the provided classes but you must maintain the overall given structure of the code. You must use the classes provided in neuralnet.py to create your model (although you can add or remove variables/functions in these classes or change the function signatures)."},{"relevance":0,"hash":"9e819ea","content":" 6. Sections marked as TODO are to be completed by you."},{"relevance":0,"hash":""}],"constants.py":[{"relevance":0,"hash":"9e819ea","content":" configYamlPath = \"./configs/\"  "},{"relevance":0,"hash":"9e819ea","content":" datasetDir = \"./data/\""},{"relevance":0,"hash":"9e819ea","content":" saveLocation = \"./plots/\""},{"relevance":0,"hash":""}],"gradient.py":[{"relevance":0,"hash":"9e819ea","content":" import numpy as np"},{"relevance":0,"hash":"9e819ea","content":" from neuralnet import Neuralnetwork"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def check_grad(model, x_train, y_train, epsilon=1e-"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Checks if gradients computed numerically are within O(epsilon**"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     Args:"},{"relevance":0,"hash":"9e819ea","content":"         model: The neural network model to check gradients for."},{"relevance":0,"hash":"9e819ea","content":"         x_train: Small subset of the original train dataset."},{"relevance":0,"hash":"9e819ea","content":"         y_train: Corresponding target labels of x_train."},{"relevance":0,"hash":"9e819ea","content":"         epsilon: Small constant for numerical approximation."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     Prints gradient difference of values calculated via numerical approximation and backprop implementation."},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     raise NotImplementedError(\"check_grad not implemented in gradient.py\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def checkGradient(x_train, y_train, config):"},{"relevance":0,"hash":"9e819ea","content":"     raise NotImplementedError(\"checkGradient not implemented in gradient.py\")"},{"relevance":0,"hash":""}],"main.py":[{"relevance":0,"hash":"9e819ea","content":" import gradient"},{"relevance":0,"hash":"9e819ea","content":" from constants import *"},{"relevance":0,"hash":"9e819ea","content":" from train import *"},{"relevance":0,"hash":"9e819ea","content":" from gradient import *"},{"relevance":0,"hash":"9e819ea","content":" import argparse"},{"relevance":0,"hash":"9e819ea","content":" import util "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" # TODO"},{"relevance":0,"hash":"9e819ea","content":" def main(args):"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Read the required config"},{"relevance":0,"hash":"9e819ea","content":"     # Create different config files for different experiments"},{"relevance":0,"hash":"9e819ea","content":"     configFile = None  # Will contain the name of the config file to be loaded"},{"relevance":0,"hash":"9e819ea","content":"     if (args.experiment == 'test_softmax'):  # Rubric #4: Softmax Regression"},{"relevance":0,"hash":"9e819ea","content":"         configFile = \"config_4.yaml\""},{"relevance":0,"hash":"9e819ea","content":"     elif (args.experiment == 'test_gradients'):  # Rubric #5: Numerical Approximation of Gradients"},{"relevance":0,"hash":"9e819ea","content":"         configFile = \"config_5.yaml\""},{"relevance":0,"hash":"9e819ea","content":"     elif (args.experiment == 'test_momentum'):  # Rubric #6: Momentum Experiments"},{"relevance":0,"hash":"9e819ea","content":"         configFile = \"config_6.yaml\""},{"relevance":0,"hash":"9e819ea","content":"     elif (args.experiment == 'test_regularization'):  # Rubric #7: Regularization Experiments"},{"relevance":0,"hash":"9e819ea","content":"         configFile = \"config_7.yaml\"  # Create a config file and change None to the config file name"},{"relevance":0,"hash":"9e819ea","content":"     elif (args.experiment == 'test_activation'):  # Rubric #8: Activation Experiments"},{"relevance":0,"hash":"9e819ea","content":"         configFile = \"config_8.yaml\"  # Create a config file and change None to the config file name"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Load the data"},{"relevance":0,"hash":"9e819ea","content":"     x_train, y_train, x_valid, y_valid, x_test, y_test = util.load_data(path=datasetDir)"},{"relevance":0,"hash":"9e819ea","content":"     # Load the configuration from the corresponding yaml file. Specify the file path and name"},{"relevance":0,"hash":"9e819ea","content":"     config = util.load_config(configYamlPath + configFile)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     nn: Neuralnetwork = Neuralnetwork(config=config)"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     nn.checkOutputGradients(x_train[0], y_train[0])"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     nn.reinitialize_weights();"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     nn = train(nn, x_train, y_train, x_valid, y_valid, config=config)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":" if __name__ == \"__main__\":"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     #Parse the input arguments"},{"relevance":0,"hash":"9e819ea","content":"     parser = argparse.ArgumentParser()"},{"relevance":0,"hash":"9e819ea","content":"     parser.add_argument('--experiment', type=str, default='test_momentum', help='Specify the experiment that you want to run')"},{"relevance":0,"hash":"9e819ea","content":"     args = parser.parse_args()"},{"relevance":0,"hash":"9e819ea","content":"     main(args)"},{"relevance":0,"hash":""}],"neuralnet.py":[{"relevance":0,"hash":"9e819ea","content":" import numpy as np"},{"relevance":0,"hash":"9e819ea","content":" import util"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" EPSILON = 1 * 10**(-"},{"relevance":0,"hash":"9e819ea","content":" class Activation():"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     The class implements different types of activation functions for"},{"relevance":0,"hash":"9e819ea","content":"     your neural network layers."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def __init__(self, activation_type = \"sigmoid\"):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Initialize activation type and placeholders here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         if activation_type not in [\"sigmoid\", \"tanh\", \"ReLU\", \"output\"]:"},{"relevance":0,"hash":"9e819ea","content":"             raise NotImplementedError(f\"{activation_type} is not implemented.\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         # Type of non-linear activation."},{"relevance":0,"hash":"9e819ea","content":"         self.activation_type = activation_type"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         # Placeholder for input. This can be used for computing gradients."},{"relevance":0,"hash":"9e819ea","content":"         self.x = None"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def __call__(self, z):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         This method allows your instances to be callable."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         return self.forward(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def forward(self, z):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Compute the forward pass."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         if self.activation_type == \"sigmoid\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.sigmoid(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"tanh\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.tanh(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"ReLU\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.ReLU(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"output\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.output(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def backward(self, z):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Compute the backward pass."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         if self.activation_type == \"sigmoid\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.grad_sigmoid(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"tanh\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.grad_tanh(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"ReLU\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.grad_ReLU(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         elif self.activation_type == \"output\":"},{"relevance":0,"hash":"9e819ea","content":"             return self.grad_output(z)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def sigmoid(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Implement the sigmoid activation here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":1,"hash":"7c875dd","content":"         return 1/ (1 + np.exp(-1 * x))"},{"relevance":0,"hash":"9e819ea","content":"         raise NotImplementedError(\"Sigmoid not implemented\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def tanh(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Implement tanh here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         return np.tanh(x)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def ReLU(self, x):"},{"relevance":1,"hash":"7c875dd","content":"         return np.maximum(np.zeros(x.shape), x)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def output(self, x):"},{"relevance":0.8096578247464841,"hash":"0fae741","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         softmax_vectors = np.exp(x - np.max(x, axis=1, keepdims=True))"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"         denominator = np.sum(softmax_vectors, axis = "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         for n in range(len(x)):"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"             softmax_vectors[n] = softmax_vectors[n]/(denominator[n])"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         return softmax_vectors"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"         "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def grad_sigmoid(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Compute the gradient for sigmoid here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         raise NotImplementedError(\"Sigmoid gradient not implemented\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def grad_tanh(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Compute the gradient for tanh here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         # 1 - tanh^2(x)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         return -1 * (np.tanh(x))**2 + 1"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def grad_ReLU(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Compute the gradient for ReLU here."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         raise NotImplementedError(\"ReLU gradient not implemented\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def grad_output(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Deliberately returning 1 for output layer case since we don't multiply by any activation for final layer's delta. Feel free to use/disregard it"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         return 1  #Deliberately returning 1 for output layer case"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" class Layer():"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     This class implements Fully Connected layers for your neural network."},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.9906037880684834,"hash":"33b056e","content":"     def __init__(self, in_units, out_units, activation:Activation, momentum=False, momentum_gamma=0, nn=None):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         # Layer(config['layer_specs'][i], config['layer_specs'][i+1], Activation(config['activation'])"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Define the architecture and create placeholders."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         np.random.seed("},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         # Randomly initialize weights"},{"relevance":0,"hash":"9e819ea","content":"         self.w = 0.01 * np.random.random((in_units + 1, out_units))"},{"relevance":0,"hash":"9e819ea","content":"         self.v = 0"},{"relevance":0,"hash":"9e819ea","content":"         self.x = None    # Save the input to forward in this"},{"relevance":0,"hash":"9e819ea","content":"         self.a = None    #output without activation"},{"relevance":0,"hash":"9e819ea","content":"         self.z = None    # Output After Activation"},{"relevance":0,"hash":"9e819ea","content":"         self.activation=activation"},{"relevance":0.9354823740057795,"hash":"25b16ea","content":"         self.momentum = momentum"},{"relevance":0.9354823740057795,"hash":"25b16ea","content":"         self.momentum_gamma= momentum_gamma"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"         self.nn: Neuralnetwork = nn # Neural Network (to access config constants)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         self.dw = 0  # Save the gradient w.r.t w in this. w already includes bias term"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         self.next_layer = None"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     def reinitialize_weights(self):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         self.w = 0.01 * np.random.random((self.w.shape[0], self.w.shape[1]))"},{"relevance":0,"hash":"9e819ea","content":"     def __call__(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Make layer callable."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         return self.forward(x)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def forward(self, x):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO: Compute the forward pass (activation of the weighted input) through the layer here and return it."},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         returns outputs"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0.8096578247464841,"hash":"0fae741","content":"         "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         self.x = util.append_bias(x)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         self.a = self.x @ self.w"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         self.z = self.activation.forward(self.a)"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         return self.z"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     def backward(self, deltaCur, learning_rate, momentum_gamma, regularization, gradReqd=True): # potentially some problem with biases?"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO"},{"relevance":0,"hash":"9e819ea","content":"         Write the code for backward pass. This takes in gradient from its next layer as input and"},{"relevance":0,"hash":"9e819ea","content":"         computes gradient for its weights and the delta to pass to its previous layers. gradReqd is used to specify whether to update the weights i.e. whether self.w should"},{"relevance":0,"hash":"9e819ea","content":"         be updated after calculating self.dw"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         The delta expression for any layer consists of delta and weights from the next layer and derivative of the "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         activation function of weighted inputs i.e. g'(a) of that layer. Hence deltaCur "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         (the input parameter) will have to be multiplied with the derivative of the "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         activation function of the weighted"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         input of the current layer to actually get the delta for the current layer. "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         Remember, this is just one way of interpreting it and you are free to interpret it any other way."},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         Feel free to change the function signature if you think of an alternative way "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         to implement the delta calculation or the backward pass"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         When implementing softmax regression part, just focus on implementing the single-layer case first."},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         Deltacur - array of deltacurs for each pattern"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         if (self.activation.activation_type == \"output\"):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             self.deltaCur = deltaCur * self.activation.backward(self.a)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         else:"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             next_w_without_bias = self.next_layer.w[:][1:]"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             self.deltaCur = self.activation.backward(self.a) * (deltaCur @ next_w_without_bias.transpose()) #Think self.deltaCur has bias since we append it to a"},{"relevance":0.9354823740057795,"hash":"25b16ea","content":" "},{"relevance":0.9906037880684834,"hash":"33b056e","content":" "},{"relevance":0.9998404799908736,"hash":"8327bd1","content":"         "},{"relevance":1,"hash":"7c875dd","content":"         regularization = (self.nn.L2_penalty * (np.abs(self.w)/self.w)) if (self.nn.L1_regularization) else (self.nn.L2_penalty * 2 * self.w)"},{"relevance":0.9998404799908736,"hash":"8327bd1","content":"         dw = (np.transpose(self.x) @ self.deltaCur) * -1 + regularization"},{"relevance":0.9354823740057795,"hash":"25b16ea","content":"         if (self.momentum):"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"             self.dw = self.dw * self.momentum_gamma + (1 - self.momentum_gamma)* dw"},{"relevance":0.9354823740057795,"hash":"25b16ea","content":"         else:"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"             self.dw = dw"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.8096578247464841,"hash":"0fae741","content":"         if (gradReqd): # TODO change to matrix multiplication"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"            self.w = self.w - learning_rate * self.dw"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"                             "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         return self.deltaCur"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" class Neuralnetwork():"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     Create a Neural Network specified by the network configuration mentioned in the config yaml file."},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def __init__(self, config):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Create the Neural Network using config."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         self.layers = []  # Store all layers in this list."},{"relevance":0,"hash":"9e819ea","content":"         self.num_layers = len(config['layer_specs']) - 1  # Set num layers here"},{"relevance":0,"hash":"9e819ea","content":"         self.x = None  # Save the input to forward in this"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         self.y = None  # For saving the output vector of the model, nxd array"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         self.targets = None  # For saving the targets, one-hot encoded"},{"relevance":0,"hash":"9e819ea","content":"         self.batch_size = config['batch_size']"},{"relevance":0,"hash":"9e819ea","content":"         self.early_stop = config['early_stop']"},{"relevance":0,"hash":"9e819ea","content":"         self.learning_rate = config['learning_rate']"},{"relevance":0,"hash":"9e819ea","content":"         self.momentum_gamma = config['momentum_gamma']"},{"relevance":0.9998404799908736,"hash":"8327bd1","content":"         self.L2_penalty = config['L2_penalty']"},{"relevance":0,"hash":"9e819ea","content":"         self.momentum = config['momentum']"},{"relevance":0.9998404799908736,"hash":"8327bd1","content":"         self.L1_regularization = config['L1_regularization']"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         # Add layers specified by layer_specs."},{"relevance":0,"hash":"9e819ea","content":"         for i in range(self.num_layers):"},{"relevance":0,"hash":"9e819ea","content":"             if i < self.num_layers - 1:"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"                 self.layers.append(Layer(config['layer_specs'][i], config['layer_specs'][i+1], Activation(config['activation']), self.momentum, self.momentum_gamma, self))"},{"relevance":0,"hash":"9e819ea","content":"             elif i  == self.num_layers - 1:"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"                 self.layers.append(Layer(config['layer_specs'][i], config['layer_specs'][i + 1], Activation(\"output\"), self.momentum, self.momentum_gamma, self))"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         for i in range(self.num_layers - "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             self.layers[i].next_layer = self.layers[i+1]"},{"relevance":0,"hash":"9e819ea","content":"     def __call__(self, x, targets=None):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Make NeuralNetwork callable."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         return self.forward(x, targets)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     def copy_weights(self):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         weights = []"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         for layer in self.layers:"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             weights.append(layer.w.copy())"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         return weights"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     def set_weights(self, weights):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         for i in range(len(self.layers)):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             self.layers[i].w = weights[i]"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     def reinitialize_weights(self):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         for layer in self.layers:"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             layer.reinitialize_weights()"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def forward(self, x, targets=None):"},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         TODO"},{"relevance":0,"hash":"9e819ea","content":"         Compute forward pass through all the layers in the network and return the loss."},{"relevance":0,"hash":"9e819ea","content":"         If targets are provided, return loss and accuracy/number of correct predictions as well."},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         Args:"},{"relevance":0,"hash":"9e819ea","content":"             x: Input data."},{"relevance":0,"hash":"9e819ea","content":"             targets: Target labels (if provided)."},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         Returns:"},{"relevance":0,"hash":"9e819ea","content":"             If targets are provided, returns accuracy and loss."},{"relevance":0,"hash":"9e819ea","content":"             If targets are not provided, returns the computed output."},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         # just input and output layer for now layer_specs: [784, 10]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         self.x = x"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         self.targets = targets"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         z = x"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         for i in range(len(self.layers)):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             layer: Layer = self.layers[i]"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             z = layer.forward(z)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         self.y = z"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         if (targets is not None):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             loss = self.loss(self.y, self.targets)"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             predictions = np.argmax(self.y, axis="},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             actual = np.argmax(self.targets, axis="},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             accuracy = np.sum(predictions == actual)/len(predictions)"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             return accuracy, loss"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         else:"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             return self.y"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def loss(self, logits, targets):"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         '''"},{"relevance":0,"hash":"9e819ea","content":"         TODO"},{"relevance":0,"hash":"9e819ea","content":"         Compute the categorical cross-entropy loss and return it."},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         Args:"},{"relevance":0,"hash":"9e819ea","content":"             logits: The predicted logits or probabilities."},{"relevance":0,"hash":"9e819ea","content":"             targets: The true target labels."},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         Returns:"},{"relevance":0,"hash":"9e819ea","content":"             The categorical cross-entropy loss."},{"relevance":0,"hash":"9e819ea","content":"         '''"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         num_categories = len(targets[0])"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         num_patterns = len(targets)"},{"relevance":0.9906037880684834,"hash":"33b056e","content":" "},{"relevance":0.9906037880684834,"hash":"33b056e","content":" "},{"relevance":0.9906037880684834,"hash":"33b056e","content":"         regularization = 0"},{"relevance":0.9906037880684834,"hash":"33b056e","content":"         for layer in self.layers:"},{"relevance":0.9998404799908736,"hash":"8327bd1","content":"             regularization += self.L2_penalty * np.sum((np.absolute(layer.w)) if self.L1_regularization else (layer.w ** "},{"relevance":0.9906037880684834,"hash":"33b056e","content":"         return -np.sum(targets * np.log(logits + 1e-"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     def backward(self, gradReqd=True):"},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         '''"},{"relevance":0,"hash":"9e819ea","content":"         TODO"},{"relevance":0,"hash":"9e819ea","content":"         Implement backpropagation here by calling the backward method of Layers class."},{"relevance":0,"hash":"9e819ea","content":"         Call backward methods of individual layers."},{"relevance":0,"hash":"9e819ea","content":"         "},{"relevance":0,"hash":"9e819ea","content":"         Args:"},{"relevance":0,"hash":"9e819ea","content":"             gradReqd: A boolean flag indicating whether to update the weights."},{"relevance":0,"hash":"9e819ea","content":"         '''"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         deltaCur = self.targets - self.y"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         # single layer case"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         for layer in reversed(self.layers):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             deltaCur = layer.backward(deltaCur, learning_rate=self.learning_rate, momentum_gamma=1, regularization=1, gradReqd=gradReqd)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     def checkOutputGradients(self, image, label):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         '''"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         Print gradient table for a single pattern"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         Args:"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             image: single image to compute gradient with"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             label: one-hot-encoded label of image"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         '''"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         image_2d = image[np.newaxis,:]"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         label_2d = label[np.newaxis,:]"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         def print_output_gradient(layer, weight_idx):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             numerical_approximation, backprop_gradient, difference = self.compute_gradient_difference(image_2d, label_2d, layer, weight_idx)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             print(\"_\" * "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             print(f\"{layer} \\t| [{weight_idx[0]}, {weight_idx[1]}] \\t|{numerical_approximation} \\t\\t| {backprop_gradient} \\t| {difference}\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         print(\"Layer \\t| dw_ij \\t| Numerical Approximation \\t| Backprop Gradient \\t| Difference\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         for i in range(len(self.layers)):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             print_output_gradient(i, (0, "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             print_output_gradient(i, (1, "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             print_output_gradient(i, (2, "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     def compute_gradient_difference(self, image, label, layer_idx, weight_idx):"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         '''"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         Print gradient table for a single pattern"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         Args:"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             image: 2D array with single training image with bias"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             label: 2D array with single one-hot-encoded label of image"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             layer_idx: index of layer with weight to computer"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"             weight_idx: tuple with index of weight to compute"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         '''"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         self.forward(image, label)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         self.backward(gradReqd=False)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         target_layer: Layer = self.layers[layer_idx]"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         backprop_gradient = target_layer.dw[weight_idx]"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         target_layer.w[weight_idx] += EPSILON"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         accuracy, loss_plus_e = self.forward(image, label)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         target_layer.w[weight_idx] -= 2 * EPSILON"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         accuracy, loss_minus_e = self.forward(image, label)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         numerical_approximation = (loss_plus_e - loss_minus_e)/(2*EPSILON)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"         difference = numerical_approximation - backprop_gradient"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         return numerical_approximation, backprop_gradient, np.abs(difference)"},{"relevance":0,"hash":""}],"test.py":[{"relevance":0.47815204287124413,"hash":"7e8653d","content":" import numpy as np"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" # Example: n by m matrix"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" matrix = np.array([[1, 2, 3],"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"                    [4, 5, 6],"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"                    [7, 8, 9]])"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" # Vector of length n"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" vector = np.array([1, 2, 3])"},{"relevance":0.8096578247464841,"hash":"0fae741","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" # Subtract the vector from the matrix"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" result = matrix - vector[:, np.newaxis]"},{"relevance":0.8096578247464841,"hash":"0fae741","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" print(np.log(np.array([-3])))"},{"relevance":0,"hash":""}],"train.py":[{"relevance":0,"hash":"9e819ea","content":" import copy"},{"relevance":0.8404297179009487,"hash":"49d6a47","content":" import matplotlib.pyplot as plt"},{"relevance":0,"hash":"9e819ea","content":" from neuralnet import *"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" def train(model: Neuralnetwork, x_train, y_train, x_valid, y_valid, config):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO: Train your model here."},{"relevance":0,"hash":"9e819ea","content":"     Implements mini-batch SGD to train the model."},{"relevance":0,"hash":"9e819ea","content":"     Implements Early Stopping."},{"relevance":0,"hash":"9e819ea","content":"     Uses config to set parameters for training like learning rate, momentum, etc."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         model - an object of the NeuralNetwork class"},{"relevance":0,"hash":"9e819ea","content":"         x_train - the train set examples"},{"relevance":0,"hash":"9e819ea","content":"         y_train - the test set targets/labels"},{"relevance":0,"hash":"9e819ea","content":"         x_valid - the validation set examples"},{"relevance":0,"hash":"9e819ea","content":"         y_valid - the validation set targets/labels"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         the trained model"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # TODO: initialize weights to 0?"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     num_epochs = config['epochs']"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     batch_size = config['batch_size']"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     early_stop = config['early_stop']"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     early_stop_epoch = config['early_stop_epoch']"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     epochs_since_improvement = 0"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     training_accuracies = []"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     training_losses = []"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     validation_accuracies = []"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"     validation_losses = []"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     min_loss = None"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     best_weights = None"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     # train model"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     for i in range(num_epochs):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         batch_accuracies = []"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         batch_losses = []"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         training_indices = list(range(len(x_train)))"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         np.random.shuffle(training_indices) # randomize order of indices"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         for j in range(0, len(x_train), batch_size):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             start = j"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             end = np.min([j + batch_size, len(x_train)])"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             batch_indices = training_indices[start: end]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             batch_x = []"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             batch_y = []"},{"relevance":0.8404297179009487,"hash":"49d6a47","content":"             for z in batch_indices:"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                 batch_x.append(x_train[z])"},{"relevance":0.8404297179009487,"hash":"49d6a47","content":"                 batch_y.append(y_train[z])"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             accuracy, loss = model.forward(np.array(batch_x), np.array(batch_y))"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"             model.backward(gradReqd=True)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             batch_accuracies.append(accuracy)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             batch_losses.append(loss)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         training_accuracies.append(np.mean(batch_accuracies))"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         training_losses.append(np.mean(batch_losses))"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"         if (early_stop):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             accuracy, loss = model.forward(np.array(x_valid), np.array(y_valid))"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             validation_accuracies.append(accuracy)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             validation_losses.append(loss)"},{"relevance":0.8293126234467343,"hash":"4ea965a","content":"             print(\"Validation loss:\", loss, \"Validation accuracy:\", accuracy)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             if (len(validation_accuracies)>1 and validation_losses[-2] < validation_losses[-1]):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                 epochs_since_improvement += 1"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             else:"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                 if (min_loss is None or loss < min_loss):"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                     min_loss = loss"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                     best_weights = model.copy_weights()"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"                 epochs_since_improvement = 0"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"             if (epochs_since_improvement == early_stop_epoch):"},{"relevance":0.8404297179009487,"hash":"49d6a47","content":"                 break"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     model.set_weights(best_weights)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     accuracy, loss = model.forward(np.array(x_valid), np.array(y_valid))"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     print(\"Final validation loss:\", loss, \"Final validation accuracy:\", accuracy)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     util.plots(trainEpochLoss=training_losses, trainEpochAccuracy=training_accuracies, valEpochLoss=validation_losses, valEpochAccuracy=validation_accuracies, earlyStop=(i if i < num_epochs - 1 else None))"},{"relevance":0.8404297179009487,"hash":"49d6a47","content":" "},{"relevance":0.8404297179009487,"hash":"49d6a47","content":"     # plot loss"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # loss_plot = plt.figure("},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # training_loss_epochs, training_losses = zip(*training_losses)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # validation_loss_epochs, validation_losses = zip(*validation_losses)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.plot(training_loss_epochs, training_losses, label='training loss', c='red')"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.plot(validation_loss_epochs, validation_losses, label = 'validation loss', c='green')"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.xlabel(\"Epochs\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.ylabel(\"Cross Entropy Loss\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.legend()"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.title(\"Loss Plots\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":" "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # # plot accuracy"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # accuracy_plot = plt.figure("},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # training_accuracy_epochs, training_accuracies = zip(*training_accuracies)"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # validation_accuracy_epochs, validation_accuracies = zip(*validation_accuracies) "},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.plot(training_accuracy_epochs, training_accuracies, label='training accuracy', c='red')"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.plot(validation_accuracy_epochs, validation_accuracies, label = 'validation accuracy', c='green')"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.xlabel(\"Epochs\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.ylabel(\"Accuracy\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.title(\"Accuracy Plots\")"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.legend()"},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     # plt.show()"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     return model  "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":"     raise NotImplementedError(\"Train function not implemented\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def modelTest(model, X_test, y_test):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Calculates and returns the accuracy & loss on the test set."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         model - the trained model, an object of the NeuralNetwork class"},{"relevance":0,"hash":"9e819ea","content":"         X_test - the test set examples"},{"relevance":0,"hash":"9e819ea","content":"         y_test - the test set targets/labels"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         test accuracy"},{"relevance":0,"hash":"9e819ea","content":"         test loss"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":"     "},{"relevance":0,"hash":"9e819ea","content":"     raise NotImplementedError(\"Test function not implemented\")"},{"relevance":0,"hash":""}],"util.py":[{"relevance":0,"hash":"9e819ea","content":" import copy"},{"relevance":0,"hash":"9e819ea","content":" import os, gzip"},{"relevance":0,"hash":"9e819ea","content":" import yaml"},{"relevance":0,"hash":"9e819ea","content":" import numpy as np"},{"relevance":0,"hash":"9e819ea","content":" import pickle"},{"relevance":0,"hash":"9e819ea","content":" import matplotlib.pyplot as plt"},{"relevance":0,"hash":"9e819ea","content":" import pandas as pd"},{"relevance":0,"hash":"9e819ea","content":" import constants"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" import random"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def load_config(path):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     Loads the config yaml from the specified path"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         path - Complete path of the config yaml file to be loaded"},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         yaml - yaml object containing the config file"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     return yaml.load(open(path, 'r'), Loader=yaml.SafeLoader)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def normalize_data(inp):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Normalizes image pixels here to have 0 mean and unit variance."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         inp : N X d 2D array where N is the number of examples and d is the number of dimensions"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         normalized inp: N X d 2D array"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # compute average pixel value and std deviation"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # subtract mean from each pixel, then divide by standard deviation"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     std_devs = np.std(inp, axis="},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     means = np.mean(inp, axis = "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     normalized_images = np.copy(inp)"},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     for i in range(len(inp)):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         normalized_images[i] = (normalized_images[i] - means[i])/std_devs[i]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     std_devs = np.std(normalized_images, axis="},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":"     means = np.mean(normalized_images, axis = "},{"relevance":0.9041371756063936,"hash":"8ad4bad","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     return normalized_images"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def one_hot_encoding(labels, num_classes="},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Encodes labels using one hot encoding."},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         labels : N dimensional 1D array where N is the number of examples"},{"relevance":0,"hash":"9e819ea","content":"         num_classes: Number of distinct labels that we have (10 for FashionMNIST)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         oneHot : N X num_classes 2D array"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     one_hot = np.zeros((len(labels), num_classes))"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     for i in range(len(labels)):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         one_hot[i][labels[i]] = 1"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     return one_hot"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def generate_minibatches(dataset, batch_size="},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"         Generates minibatches of the dataset"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         args:"},{"relevance":0,"hash":"9e819ea","content":"             dataset : 2D Array N (examples) X d (dimensions)"},{"relevance":0,"hash":"9e819ea","content":"             batch_size: mini batch size. Default value=64"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         yields:"},{"relevance":0,"hash":"9e819ea","content":"             (X,y) tuple of size=batch_size"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     X, y = dataset"},{"relevance":0,"hash":"9e819ea","content":"     l_idx, r_idx = 0, batch_size"},{"relevance":0,"hash":"9e819ea","content":"     while r_idx < len(X):"},{"relevance":0,"hash":"9e819ea","content":"         yield X[l_idx:r_idx], y[l_idx:r_idx]"},{"relevance":0,"hash":"9e819ea","content":"         l_idx, r_idx = r_idx, r_idx + batch_size"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     yield X[l_idx:], y[l_idx:]"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def calculateCorrect(y, t):  #Feel free to use this function to return accuracy instead of number of correct predictions"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Calculates the number of correct predictions"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         y: Predicted Probabilities"},{"relevance":0,"hash":"9e819ea","content":"         t: Labels in one hot encoding"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         the number of correct predictions"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     "},{"relevance":0,"hash":"9e819ea","content":"     raise NotImplementedError(\"calculateCorrect not implemented\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def append_bias(X):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Appends bias to the input"},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         X (N X d 2D Array)"},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         X_bias (N X (d+"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0.9350550537389073,"hash":"61b4d2c","content":"     return np.hstack((np.ones((X.shape[0], "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def plots(trainEpochLoss, trainEpochAccuracy, valEpochLoss, valEpochAccuracy, earlyStop=None):"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     Helper function for creating the plots"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     if not os.path.exists(constants.saveLocation):"},{"relevance":0,"hash":"9e819ea","content":"         os.makedirs(constants.saveLocation)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     fig1, ax1 = plt.subplots(figsize=((24, "},{"relevance":0,"hash":"9e819ea","content":"     epochs = np.arange(1,len(trainEpochLoss)+1,"},{"relevance":0,"hash":"9e819ea","content":"     ax1.plot(epochs, trainEpochLoss, 'r', label=\"Training Loss\")"},{"relevance":0,"hash":"9e819ea","content":"     ax1.plot(epochs, valEpochLoss, 'g', label=\"Validation Loss\")"},{"relevance":0,"hash":"9e819ea","content":"     if earlyStop != None:"},{"relevance":0,"hash":"9e819ea","content":"         plt.scatter(epochs[earlyStop],valEpochLoss[earlyStop],marker='x', c='g',s=400,label='Early Stop Epoch')"},{"relevance":0,"hash":"9e819ea","content":"     plt.xticks(ticks=np.arange(min(epochs),max(epochs)+1,"},{"relevance":0,"hash":"9e819ea","content":"     plt.yticks(fontsize="},{"relevance":0,"hash":"9e819ea","content":"     ax1.set_title('Loss Plots', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax1.set_xlabel('Epochs', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax1.set_ylabel('Cross Entropy Loss', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax1.legend(loc=\"upper right\", fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     plt.savefig(constants.saveLocation+\"loss.eps\")"},{"relevance":0,"hash":"9e819ea","content":"     plt.show()"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     fig2, ax2 = plt.subplots(figsize=((24, "},{"relevance":0,"hash":"9e819ea","content":"     ax2.plot(epochs, trainEpochAccuracy, 'r', label=\"Training Accuracy\")"},{"relevance":0,"hash":"9e819ea","content":"     ax2.plot(epochs, valEpochAccuracy, 'g', label=\"Validation Accuracy\")"},{"relevance":0,"hash":"9e819ea","content":"     if earlyStop != None:"},{"relevance":0,"hash":"9e819ea","content":"         plt.scatter(epochs[earlyStop], valEpochAccuracy[earlyStop], marker='x', c='g', s=400, label='Early Stop Epoch')"},{"relevance":0,"hash":"9e819ea","content":"     plt.xticks(ticks=np.arange(min(epochs),max(epochs)+1,"},{"relevance":0,"hash":"9e819ea","content":"     plt.yticks(fontsize="},{"relevance":0,"hash":"9e819ea","content":"     ax2.set_title('Accuracy Plots', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax2.set_xlabel('Epochs', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax2.set_ylabel('Accuracy', fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     ax2.legend(loc=\"lower right\", fontsize=35."},{"relevance":0,"hash":"9e819ea","content":"     plt.savefig(constants.saveLocation+\"accuarcy.eps\")"},{"relevance":0,"hash":"9e819ea","content":"     plt.show()"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     #Saving the losses and accuracies for further offline use"},{"relevance":0,"hash":"9e819ea","content":"     pd.DataFrame(trainEpochLoss).to_csv(constants.saveLocation+\"trainEpochLoss.csv\")"},{"relevance":0,"hash":"9e819ea","content":"     pd.DataFrame(valEpochLoss).to_csv(constants.saveLocation+\"valEpochLoss.csv\")"},{"relevance":0,"hash":"9e819ea","content":"     pd.DataFrame(trainEpochAccuracy).to_csv(constants.saveLocation+\"trainEpochAccuracy.csv\")"},{"relevance":0,"hash":"9e819ea","content":"     pd.DataFrame(valEpochAccuracy).to_csv(constants.saveLocation+\"valEpochAccuracy.csv\")"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def createTrainValSplit(x_train,y_train):"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     TODO"},{"relevance":0,"hash":"9e819ea","content":"     Creates the train-validation split (80-20 split for train-val). Please shuffle the data before creating the train-val split."},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # shuffle data"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     shuffledData = []"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     for image, label in zip(x_train, y_train):"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"         shuffledData.append((image, label))"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     random.shuffle(shuffledData)"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # split data"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     splitIdx = round(len(shuffledData)*0."},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     train, validation = shuffledData[:splitIdx], shuffledData[splitIdx:]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     "},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     # separate data into images and labels"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     train_images = [elem[0] for elem in train]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     train_labels = [elem[1] for elem in train]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     val_images = [elem[0] for elem in validation]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     val_labels = [elem[1] for elem in validation]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     return train_images, train_labels, val_images, val_labels"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" import torch"},{"relevance":0,"hash":"9e819ea","content":" from torch.utils.data import Dataset"},{"relevance":0,"hash":"9e819ea","content":" from torchvision import datasets"},{"relevance":0,"hash":"9e819ea","content":" from torchvision.transforms import ToTensor"},{"relevance":0,"hash":"9e819ea","content":" from torch.utils.data import DataLoader"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" import matplotlib.pyplot as plt "},{"relevance":0,"hash":"9e819ea","content":" import os"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def get_data():"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     Downloads FashionMNIST from Torch's dataset collection"},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         dataset objects for both train and test data"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     train_data = datasets.FashionMNIST("},{"relevance":0,"hash":"9e819ea","content":"         root='data',"},{"relevance":0,"hash":"9e819ea","content":"         train=True,"},{"relevance":0,"hash":"9e819ea","content":"         download=True,"},{"relevance":0,"hash":"9e819ea","content":"         transform=ToTensor()"},{"relevance":0,"hash":"9e819ea","content":"     )"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     test_data = datasets.FashionMNIST("},{"relevance":0,"hash":"9e819ea","content":"         root='data',"},{"relevance":0,"hash":"9e819ea","content":"         train=False,"},{"relevance":0,"hash":"9e819ea","content":"         download=True,"},{"relevance":0,"hash":"9e819ea","content":"         transform=ToTensor()"},{"relevance":0,"hash":"9e819ea","content":"     )"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     return train_data, test_data"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" def load_data(path):"},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     Loads, splits our dataset into train, val and test sets and normalizes them"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     args:"},{"relevance":0,"hash":"9e819ea","content":"         path: Path to dataset"},{"relevance":0,"hash":"9e819ea","content":"     returns:"},{"relevance":0,"hash":"9e819ea","content":"         train_normalized_images, train_one_hot_labels, val_normalized_images, val_one_hot_labels,  test_normalized_images, test_one_hot_labels"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     \"\"\""},{"relevance":0,"hash":"9e819ea","content":"     if not os.path.exists(path):"},{"relevance":0,"hash":"9e819ea","content":"         os.makedirs(path)"},{"relevance":0,"hash":"9e819ea","content":"         print('DOWNLOADING DATA...')"},{"relevance":0,"hash":"9e819ea","content":"         train_data, test_data = get_data() # these are Dataset objects in PyTorch"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         train_dataloader = DataLoader(train_data, batch_size=1, shuffle=True)"},{"relevance":0,"hash":"9e819ea","content":"         test_dataloader = DataLoader(test_data, batch_size=1, shuffle=False)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         # Store and convert data to numpy"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         train_im_list = []"},{"relevance":0,"hash":"9e819ea","content":"         train_lab_list = []"},{"relevance":0,"hash":"9e819ea","content":"         for im, lab in train_dataloader:"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"             im = im.squeeze().numpy()"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"             train_im_list.append(im)"},{"relevance":0,"hash":"9e819ea","content":"             train_lab_list.append(lab.item())"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         train_im = np.array(train_im_list)"},{"relevance":0,"hash":"9e819ea","content":"         train_lab = np.array(train_lab_list)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         test_im_list = []"},{"relevance":0,"hash":"9e819ea","content":"         test_lab_list = []"},{"relevance":0,"hash":"9e819ea","content":"         for im, lab in test_dataloader:"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"             im = im.squeeze().numpy()"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"             test_im_list.append(im)"},{"relevance":0,"hash":"9e819ea","content":"             test_lab_list.append(lab.item())"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         test_im = np.array(test_im_list)"},{"relevance":0,"hash":"9e819ea","content":"         test_lab = np.array(test_lab_list)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         path = 'data/numpy/'"},{"relevance":0,"hash":"9e819ea","content":"         os.makedirs(os.path.dirname(path), exist_ok=True)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         np.save(f'{path}/train_features.npy', train_im)"},{"relevance":0,"hash":"9e819ea","content":"         np.save(f'{path}/train_labels.npy', train_lab)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         np.save(f'{path}/test_features.npy', test_im)"},{"relevance":0,"hash":"9e819ea","content":"         np.save(f'{path}/test_labels.npy', test_lab)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"         print(f'DATA DOWNLOAD COMPLETE.')"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Load data from pickle file"},{"relevance":0,"hash":"9e819ea","content":"     print(f'LOADING DATA ...')"},{"relevance":0,"hash":"9e819ea","content":"     train_images = np.load('data/numpy/train_features.npy')"},{"relevance":0,"hash":"9e819ea","content":"     train_labels = np.load('data/numpy/train_labels.npy')"},{"relevance":0,"hash":"9e819ea","content":"     test_images = np.load('data/numpy/test_features.npy')"},{"relevance":0,"hash":"9e819ea","content":"     test_labels = np.load('data/numpy/test_labels.npy')"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     "},{"relevance":0.8096578247464841,"hash":"0fae741","content":"     # train_images = train_images[:100]"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"     # train_labels = train_labels[:100]"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"     # test_images = test_images[:100]"},{"relevance":0.8096578247464841,"hash":"0fae741","content":"     # test_labels = test_labels[:100]"},{"relevance":0,"hash":"9e819ea","content":"     print('DATA LOADING COMPLETE.\\n')"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Reformat the images and labels"},{"relevance":0,"hash":"9e819ea","content":"     train_images, test_images = train_images.reshape(train_images.shape[0], -"},{"relevance":0,"hash":"9e819ea","content":"     train_labels, test_labels = np.expand_dims(train_labels, axis="},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Create 80-20 train-validation split"},{"relevance":0,"hash":"9e819ea","content":"     train_images, train_labels, val_images, val_labels = createTrainValSplit(train_images, train_labels)"},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     # Preprocess data"},{"relevance":0,"hash":"9e819ea","content":"     train_normalized_images = normalize_data(train_images)"},{"relevance":0,"hash":"9e819ea","content":"     train_one_hot_labels = one_hot_encoding(train_labels, num_classes="},{"relevance":0,"hash":"9e819ea","content":"     "},{"relevance":0,"hash":"9e819ea","content":"     val_normalized_images = normalize_data(val_images)"},{"relevance":0,"hash":"9e819ea","content":"     val_one_hot_labels = one_hot_encoding(val_labels, num_classes="},{"relevance":0.47815204287124413,"hash":"7e8653d","content":" "},{"relevance":0,"hash":"9e819ea","content":"     test_normalized_images = normalize_data(test_images)"},{"relevance":0,"hash":"9e819ea","content":"     test_one_hot_labels = one_hot_encoding(test_labels, num_classes="},{"relevance":0,"hash":"9e819ea","content":" "},{"relevance":0,"hash":"9e819ea","content":"     return train_normalized_images, train_one_hot_labels, val_normalized_images, val_one_hot_labels, test_normalized_images, test_one_hot_labels"},{"relevance":0,"hash":""}],"visualize.ipynb":[{"relevance":0,"hash":"9e819ea","content":" {"},{"relevance":0,"hash":"9e819ea","content":"  \"cells\": ["},{"relevance":0,"hash":"9e819ea","content":"   {"},{"relevance":0,"hash":"9e819ea","content":"    \"cell_type\": \"code\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"execution_count\": 1,"},{"relevance":0,"hash":"9e819ea","content":"    \"metadata\": {},"},{"relevance":0,"hash":"9e819ea","content":"    \"outputs\": [],"},{"relevance":0,"hash":"9e819ea","content":"    \"source\": ["},{"relevance":0,"hash":"9e819ea","content":"     \"from util import get_data\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"import torch\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"import numpy as np\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"import matplotlib.pyplot as plt\""},{"relevance":0,"hash":"9e819ea","content":"    ]"},{"relevance":0,"hash":"9e819ea","content":"   },"},{"relevance":0,"hash":"9e819ea","content":"   {"},{"relevance":0,"hash":"9e819ea","content":"    \"cell_type\": \"markdown\","},{"relevance":0,"hash":"9e819ea","content":"    \"metadata\": {},"},{"relevance":0,"hash":"9e819ea","content":"    \"source\": ["},{"relevance":0,"hash":"9e819ea","content":"     \"This file is to visualize some of the images in the Fashion MNIST dataset. This should be done prior to any model building or implementation.\""},{"relevance":0,"hash":"9e819ea","content":"    ]"},{"relevance":0,"hash":"9e819ea","content":"   },"},{"relevance":0,"hash":"9e819ea","content":"   {"},{"relevance":0,"hash":"9e819ea","content":"    \"cell_type\": \"code\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"execution_count\": 2,"},{"relevance":0,"hash":"9e819ea","content":"    \"metadata\": {},"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"outputs\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stdout\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data\\\\FashionMNIST\\\\raw\\\\train-images-idx3-ubyte.gz\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stderr\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"100%|██████████| 26421880/26421880 [00:33<00:00, 791324.80it/s] \\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stdout\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Extracting data\\\\FashionMNIST\\\\raw\\\\train-images-idx3-ubyte.gz to data\\\\FashionMNIST\\\\raw\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data\\\\FashionMNIST\\\\raw\\\\train-labels-idx1-ubyte.gz\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stderr\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"100%|██████████| 29515/29515 [00:00<00:00, 190999.93it/s]\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stdout\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Extracting data\\\\FashionMNIST\\\\raw\\\\train-labels-idx1-ubyte.gz to data\\\\FashionMNIST\\\\raw\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data\\\\FashionMNIST\\\\raw\\\\t10k-images-idx3-ubyte.gz\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stderr\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"100%|██████████| 4422102/4422102 [00:01<00:00, 3416714.87it/s]\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stdout\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Extracting data\\\\FashionMNIST\\\\raw\\\\t10k-images-idx3-ubyte.gz to data\\\\FashionMNIST\\\\raw\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data\\\\FashionMNIST\\\\raw\\\\t10k-labels-idx1-ubyte.gz\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stderr\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"100%|██████████| 5148/5148 [00:00<?, ?it/s]\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stdout\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"Extracting data\\\\FashionMNIST\\\\raw\\\\t10k-labels-idx1-ubyte.gz to data\\\\FashionMNIST\\\\raw\\n\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"name\": \"stderr\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"stream\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"text\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"\\n\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     }"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    ],"},{"relevance":0,"hash":"9e819ea","content":"    \"source\": ["},{"relevance":0,"hash":"9e819ea","content":"     \"# Grab the data - they get returned as Dataset objects in Torch\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"train_data, test_data = get_data()\""},{"relevance":0,"hash":"9e819ea","content":"    ]"},{"relevance":0,"hash":"9e819ea","content":"   },"},{"relevance":0,"hash":"9e819ea","content":"   {"},{"relevance":0,"hash":"9e819ea","content":"    \"cell_type\": \"code\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"execution_count\": 3,"},{"relevance":0,"hash":"9e819ea","content":"    \"metadata\": {},"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"outputs\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"data\": {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"image/png\": \"\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       \"text/plain\": ["},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"        \"<Figure size 800x800 with 9 Axes>\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"       ]"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"metadata\": {},"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"      \"output_type\": \"display_data\""},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"     }"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    ],"},{"relevance":0,"hash":"9e819ea","content":"    \"source\": ["},{"relevance":0,"hash":"9e819ea","content":"     \"### The labels of the Fashion MNIST dataset. We just plot a few images to get a very rough idea of what some \\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"### data samples look like.\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"labels_map = {\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    0: \\\"T-Shirt\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    1: \\\"Trouser\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    2: \\\"Pullover\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    3: \\\"Dress\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    4: \\\"Coat\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    5: \\\"Sandal\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    6: \\\"Shirt\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    7: \\\"Sneaker\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    8: \\\"Bag\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    9: \\\"Ankle Boot\\\",\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"}\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"figure = plt.figure(figsize=(8, "},{"relevance":0,"hash":"9e819ea","content":"     \"cols, rows = 3, 3\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"for i in range(1, cols * rows + "},{"relevance":0,"hash":"9e819ea","content":"     \"    sample_idx = torch.randint(len(train_data), size=(1,)).item()\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    img, label = train_data[sample_idx]\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    figure.add_subplot(rows, cols, i)\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    plt.title(labels_map[label])\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    plt.axis(\\\"off\\\")\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"    plt.imshow(img.squeeze(), cmap=\\\"gray\\\")\\n\","},{"relevance":0,"hash":"9e819ea","content":"     \"plt.show()\""},{"relevance":0,"hash":"9e819ea","content":"    ]"},{"relevance":0,"hash":"9e819ea","content":"   }"},{"relevance":0,"hash":"9e819ea","content":"  ],"},{"relevance":0,"hash":"9e819ea","content":"  \"metadata\": {"},{"relevance":0,"hash":"9e819ea","content":"   \"kernelspec\": {"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"display_name\": \"Python 3\","},{"relevance":0,"hash":"9e819ea","content":"    \"language\": \"python\","},{"relevance":0,"hash":"9e819ea","content":"    \"name\": \"python3\""},{"relevance":0,"hash":"9e819ea","content":"   },"},{"relevance":0,"hash":"9e819ea","content":"   \"language_info\": {"},{"relevance":0,"hash":"9e819ea","content":"    \"codemirror_mode\": {"},{"relevance":0,"hash":"9e819ea","content":"     \"name\": \"ipython\","},{"relevance":0,"hash":"9e819ea","content":"     \"version\": 3"},{"relevance":0,"hash":"9e819ea","content":"    },"},{"relevance":0,"hash":"9e819ea","content":"    \"file_extension\": \".py\","},{"relevance":0,"hash":"9e819ea","content":"    \"mimetype\": \"text/x-python\","},{"relevance":0,"hash":"9e819ea","content":"    \"name\": \"python\","},{"relevance":0,"hash":"9e819ea","content":"    \"nbconvert_exporter\": \"python\","},{"relevance":0,"hash":"9e819ea","content":"    \"pygments_lexer\": \"ipython3\","},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"    \"version\": \"3.11.1\""},{"relevance":0,"hash":"9e819ea","content":"   },"},{"relevance":0.47815204287124413,"hash":"7e8653d","content":"   \"orig_nbformat\": 4"},{"relevance":0,"hash":"9e819ea","content":"  },"},{"relevance":0,"hash":"9e819ea","content":"  \"nbformat\": 4,"},{"relevance":0,"hash":"9e819ea","content":"  \"nbformat_minor\": 2"},{"relevance":0,"hash":"9e819ea","content":" }"},{"relevance":0,"hash":""}]}